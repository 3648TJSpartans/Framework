Create generic tank drive subsystem & commands (and swerve)
Create generic velocity/position motor(s) subsystem & commands. Link to encoder? SetPower. Toggle. Coast/break? Hold (with off), Level(s) of speed/position. Analog input. Inverse input
create generic motor(s) power subsystem & commands. Set Power. Toggle. Coast/break? Hold (with off), Level(s) of power. Analog input. Inverse input
Create generic solenoid(s) subsystem & commands. Set state. Toggle. Hold (with default) Inverse input.
--All subsystems should support reloading of config. Config reload should be a command.  (Kinda done - maybe button to just run code to restart entire robot?)


Create motor util with configs such as pid, power/speed limit, etc. In motor config
Create controller util class. button debounce, deadband, linear/non-linear mapping of input to output. In Controller config
create logging class. Time/mode/+otherstuff.

Create reading of AUTON from xml into command groups

integrate shuffleboard into the framework for easy of testing and for in game changes. somewhat done already. Needs testing. Needs to dynamically pick value as well
failsafe for sensors solienoid and motors might need testing
-Need to add more properties or expand defaultValue architecture

make a compressor object

RobotInit->controllers/auton/robotxml -- builds out commands for input/auton and starts subsystems
Subsystem->subsystemcollection->motors/solenids/etc.

Motors->encoder/PID
to access an encoder, ask the owning motor for it